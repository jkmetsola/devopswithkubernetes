#!/usr/bin/env python3

"""Simple server tool."""

import json
from http.server import SimpleHTTPRequestHandler

from backend_dbhandler import BackendDatabaseHandler
from tcpserver import TCPServerLauncher


class InvalidRequestError(Exception):
    """Exception raised when server gets invalid request."""


class BackendRequestHandler(SimpleHTTPRequestHandler):
    """Request handler that serves the content of a xxxxx file."""

    def do_GET(self) -> None:  # noqa: N802
        """Handle GET requests by reading the file and returning its content."""
        todos = json.dumps(DB_CONNECTION.get_todos()).encode("utf-8")
        self.send_response(200)
        self.send_header("Content-type", "application/json")
        self.end_headers()
        self.wfile.write(todos)

    def do_POST(self) -> None:  # noqa: N802
        """Handle POST requests by adding the content to the file."""
        post_data = self.rfile.read(int(self.headers["Content-Length"]))
        decoded_post_data = post_data.decode("utf-8")
        new_todo_item = decoded_post_data.split("=")[1]
        if len(new_todo_item) > 140:  # noqa: PLR2004
            msg = (
                "To do item is longer than 140 characters. "
                f"Invalid item: {new_todo_item}"
            )
            raise InvalidRequestError(msg)
        DB_CONNECTION.insert_todo(new_todo_item)
        resp_data = json.dumps(
            {"message": "POST request received", "data": decoded_post_data}
        ).encode("utf-8")
        self.send_response(200)
        self.send_header("Content-type", "application/json")
        self.end_headers()
        self.wfile.write(resp_data)


if __name__ == "__main__":
    DB_CONNECTION = BackendDatabaseHandler()
    TCPServerLauncher.run(int("{{.appPort}}"), BackendRequestHandler)
